import { DisMiss } from "./DisMiss";
import { ServerUserItem } from "./ServerUserItem";
import { GameServer } from "./GameServer";
interface IWriteUserScore {
    Chair: number;
    Score: number;
    Tax: number;
}
export interface IGameDetail {
    replayCode: string;
    round: number;
    time: number;
    score: number[][];
}
export declare class TableFrame {
    tableID: number;
    tableUserArray: ServerUserItem[];
    tableWatcherMap: {};
    gameStatus: number;
    chairCount: number;
    gameStart: boolean;
    gameMode: number;
    REVENUE_DENOMINATOR: number;
    roomInfo: any;
    tableSetting: any;
    gameServer: GameServer;
    tableFrameSink: any;
    dismiss: DisMiss;
    startTime: number;
    kickoutTimer: any;
    kickoutEndTime: number;
    constructor(id: any, roomInfo: any, gameServer: any);
    setTableUserData(config: any): void;
    getTableUserData(): any;
    getUserSetChairCount(): any;
    getCurPlayerNum(): number;
    getRoomInfo(): any;
    startGame(): void;
    concludeGame(gameStatus: any): void;
    sendTableStatus(): void;
    dismissGame(): void;
    onUserOffline(userItem: any): boolean;
    onUserRelogin(userItem: any): boolean;
    getCurRound(): number;
    checkStandup(userItem: any): any;
    onUserStandUp(userItem: any): {
        code: number;
        info: string;
    };
    onAdminJiesan(): void;
    performSitDownAction(chairID: any, userItem: any): boolean;
    performStandUpActionNotNotifyPlaza(userItem: any): boolean;
    getSitUserCount(): number;
    getTableUserItem(chairID: any): ServerUserItem;
    setGameStatus(gameStatus: any): void;
    getGameStatus(): number;
    getFreeChairID(): number;
    getChairInfoArray(): any[];
    onEventSocketGame(subCMD: any, data: any, userItem: any): any;
    onEventSocketFrame(subCMD: any, data: any, userItem: any): boolean;
    efficacyStartGame(): any;
    recordStartGameTime(): void;
    getGameTime(): number;
    broadCastTableData(mainCMD: any, subCMD: any, chairID: any, data: any): void;
    sendTableData(mainCMD: any, subCMD: any, chairID: any, data: any, excludeIDs?: any): boolean;
    sendToAll(mainCMD: any, subCMD: any, data: any, excludeUserIDArray?: any[], includeWatcher?: boolean): boolean;
    sendToPlayer(mainCMD: any, subCMD: any, chairID: any, data: any): boolean;
    send2Watcher(mainCMD: any, subCMD: any, data: any, excludeUserIDArray: any): void;
    sendGameScene(userItem: any, msg: any): boolean;
    writeTableScore(scoreInfoArray: any): boolean;
    writeUserScore(scoreInfo: IWriteUserScore): any;
    bulkWriteScore(scoreArray: any): void;
    writeDiamond(userID: any, diamond: any, desc: any): void;
    autoCostDiamond(): void;
    costDiamond(): void;
    writeScoreArray(infoArray: any): void;
    checkUserScore(chairID: any): boolean;
    checkTableUsersScore(): boolean;
    sendFishNotice(data: any): void;
    calculateRevenue(chair: any, score: any, isSysBanker?: boolean): number;
    sendTableUserItemData(userItem: any, subCMD: any, data: any): boolean;
    kickOutUserItem(chairID: any, msg: any, type?: any): void;
    getRoomInfoPackage(): any;
    getUserInfoPacakge(serverUserItem: any): any[];
    onUserChat(userItem: any, data: any): void;
    kickoutAllUser(notify?: boolean): void;
    setUserOnline(userItem: ServerUserItem, online: any): void;
    addWatcher(userItem: any): void;
    getWatcher(): {};
    startCloseTimer(): void;
    stopCloseTimer(): void;
    getKickoutLeftTime(): number;
    sendKickoutPackate(chairID: any, isClose?: boolean): void;
    sendDialogCMD(chairID: any, dialogData: any): void;
    getTablePlayers(): any[];
    private getPlayerArray;
    writeGameResult2(totalScore: number[], gameDetailArray: IGameDetail[], gameEndMsgArray?: any[]): void;
    writeGameResult(totalScore: any, gameResultArray: any): void;
    writeGameResultForCustom(playerArray: any, totalScore: any, gameResultArray: any, gameDetailArray?: any[]): void;
    writeGameReplay(round: any, replayData: any, gameEndInfo?: {}): string;
    getPlayerInfoArray(): any[];
    sendTableStartData(): void;
}
export {};
